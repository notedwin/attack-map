{% extends "base" %}

{% block content %}
<nav>
    <h1>Attack Map</h1>
    <a href="https://notedwin.tech">Home page</a>
</nav>


<div id="container" style="position: relative; width: 100%;"></div>
<script>
    //currently shows the locations based on when the server started
    //shows actual data and not random data
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }


    var arcs = [];
    var bubbles = [];
    //basic map config with custom fills, mercator projection
    async function demo() {
        var loc = JSON.parse("{{name}}".replace(/&quot;/g, '"'));
        var _table_ = document.createElement('table'),
            _tr_ = document.createElement('tr'),
            _th_ = document.createElement('th'),
            _td_ = document.createElement('td'),
            _tb_ = document.createElement('tbody');

        function buildHtmlTable(arr) {
            var table = _table_.cloneNode(false),
                tb = _tb_.cloneNode(false);
            columns = addAllColumnHeaders(arr, table);
            for (var i = 0, maxi = arr.length; i < maxi; ++i) {
                var tr = _tr_.cloneNode(false);
                for (var j = 0, maxj = columns.length; j < maxj; ++j) {
                    var td = _td_.cloneNode(false);
                    cellValue = arr[i][columns[j]];
                    td.appendChild(document.createTextNode(arr[i][columns[j]] || ''));
                    tr.appendChild(td);
                }
                tb.appendChild(tr);
            }
            table.appendChild(tb);
            return table;
        }

        // Adds a header row to the table and returns the set of columns.
        // Need to do union of keys from all records as some records may not contain
        // all records
        function addAllColumnHeaders(arr, table) {
            var columnSet = [],
                tr = _tr_.cloneNode(false);
            for (var i = 0, l = arr.length; i < l; i++) {
                for (var key in arr[i]) {
                    if (arr[i].hasOwnProperty(key) && columnSet.indexOf(key) === -1) {
                        columnSet.push(key);
                        var th = _th_.cloneNode(false);
                        th.appendChild(document.createTextNode(key));
                        tr.appendChild(th);
                    }
                }
            }
            table.appendChild(tr);
            return columnSet;
        }



        user_ip_time = JSON.parse(JSON.stringify(loc));
        for (index = 0; index < loc.length; ++index) {
            delete user_ip_time[index].port;
            delete user_ip_time[index].lat;
            delete user_ip_time[index].lon;
        }
        document.body.appendChild(buildHtmlTable(user_ip_time));

        var style = getComputedStyle(document.body)

        var map = new Datamap({
            responsive: true,
            scope: 'world',
            element: document.getElementById('container'),
            projection: 'mercator',
            responsive: true,
            fills: {
                defaultFill: style.getPropertyValue('--text'),
                black: style.getPropertyValue('--background')
            }
            , geographyConfig: {
                hideAntarctica: false,
                borderColor: style.getPropertyValue('--background'),
                highlightFillColor: style.getPropertyValue('--accent'),
                highlightBorderColor: style.getPropertyValue('--accent'),
                popupOnHover: false, //disable the popup while hovering
            }
        });
        while (loc) {
            arcs.pop();
            arcs.pop();

            // get and remove random element from array
            var random_ip = loc[Math.floor(Math.random() * loc.length)];
            loc.splice(loc.indexOf(random_ip), 1);


            var { user, ip, port, lon, lat, time } = random_ip;
            //once parsed

            arcs.push({
                origin: {
                    latitude: lat,
                    longitude: lon
                },
                destination: {
                    latitude: 41.84, longitude: -87.64
                }
            });

            rand = '#' + (Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0');

            bubbles.push({ user: user, port: port, ip: ip, latitude: lat, longitude: lon, radius: 5, fillKey: 'black' });

            bubbles.push({ user: "edwin", port: "22", ip: 'localhost', latitude: 41.84, longitude: -87.64, radius: 5, fillKey: 'black' });

            map.arc(arcs, { strokeWidth: 5, strokeColor: rand });
            map.bubbles(bubbles, {
                popupTemplate: function (geo, data) {
                    return "<div class='hoverinfo'> user: " + data.user + " on port: " + data.port + " from: " + data.ip + "</div>";
                }
            });
            map.svg.selectAll('path.datamaps-arc').attr("opacity", 1);
            map.svg.selectAll('path.datamaps-arc').transition().duration(5000).style("opacity", 0);
            map.svg.selectAll('path.datamaps-arc').transition().delay(3000).remove();
            await sleep(2000);
        }
    }

    demo();
</script>
{% endblock content %}
{% block scripts %}
<script src="/static/d3.js"></script>
<script src="/static/topo.js"></script>
<script src="/static/datamaps.js"></script>
{% endblock scripts %}