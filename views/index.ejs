<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cyber attack Map</title>
    <script src="https://d3js.org/d3.v3.min.js"></script>
    <script src="https://d3js.org/topojson.v1.min.js"></script>
    <link rel="stylesheet" href="style.css">
    <!-- I recommend you host this file on your own, since this will change without warning -->
    <script src="https://datamaps.github.io/scripts/datamaps.world.min.js?v=1"></script>
</head>

<body>
    <h1>Attack Map</h1>
    <h2>Attacks today: <%- loc.length %></h2>
    <a href="https://edwin.computer">Go to Edwin's Home page</a>
    <div id="container" style="position: relative; width: 100%;"></div>
    <script>
        //currently shows the locations based on when the server started
        //shows actual data and not random data
        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
        var lineFadeTime = 2000;
        var lineDrawTime = 850;

        // hard coded: Chicago
        var dest = {
            latitude: 41.84,
            longitude: -87.64
        }
        var loc = <%- JSON.stringify(loc) %>; 
        //basic map config with custom fills, mercator projection
        //instead of doing everything at one
        //query the database for the 5 most recent Attacks every 20 seconds
        // 
        var _table_ = document.createElement('table'),
            _tr_ = document.createElement('tr'),
            _th_ = document.createElement('th'),
            _td_ = document.createElement('td');

        // Builds the HTML Table out of myList json data from Ivy restful service.
        function buildHtmlTable(arr) {
            var table = _table_.cloneNode(false),
                columns = addAllColumnHeaders(arr, table);
            for (var i = 0, maxi = arr.length; i < maxi; ++i) {
                var tr = _tr_.cloneNode(false);
                for (var j = 0, maxj = columns.length; j < maxj; ++j) {
                    var td = _td_.cloneNode(false);
                    cellValue = arr[i][columns[j]];
                    td.appendChild(document.createTextNode(arr[i][columns[j]] || ''));
                    tr.appendChild(td);
                }
                table.appendChild(tr);
            }
            return table;
        }

        // Adds a header row to the table and returns the set of columns.
        // Need to do union of keys from all records as some records may not contain
        // all records
        function addAllColumnHeaders(arr, table) {
            var columnSet = [],
                tr = _tr_.cloneNode(false);
            for (var i = 0, l = arr.length; i < l; i++) {
                for (var key in arr[i]) {
                    if (arr[i].hasOwnProperty(key) && columnSet.indexOf(key) === -1) {
                        columnSet.push(key);
                        var th = _th_.cloneNode(false);
                        th.appendChild(document.createTextNode(key));
                        tr.appendChild(th);
                    }
                }
            }
            table.appendChild(tr);
            return columnSet;
        }

        user_ip_time = JSON.parse(JSON.stringify(loc));
        for (index=0; index<loc.length; ++index){
            delete user_ip_time[index].port;
            delete user_ip_time[index].lat;
            delete user_ip_time[index].lon;
        }

        document.body.appendChild(buildHtmlTable(user_ip_time));

        var map = new Datamap({
                scope: 'world',
                element: document.getElementById('container'),
                projection: 'mercator',
                responsive: true,
                fills: {
                    defaultFill: "#DDDDDD", //#ABDDA4
                    gt50:"#222222"
                }
            })

            var arcs = [];
            var bubbles = [];

        //basic map config with custom fills, mercator projection
        async function demo() {
            
            // while still connected
            var i = 0;
            //parsing input
            while (i < loc.length) {
                arcs.pop();
                bubbles.pop();
                bubbles.pop();
                arcs.pop();
                bubbles.pop();
                bubbles.pop();
                var {user,ip,port,lon,lat} = loc[i]; //add time
                //once parsed
                
                arcs.push({
                    origin: {
                        latitude: lat,
                        longitude: lon
                    },
                    destination: dest
                });

                bubbles.push({ user: user, port: port, ip: ip, latitude: lat, longitude: lon, radius: 5, fillKey: 'gt50' });

                bubbles.push({ user: "edwin", port: "22", ip: 'localhost', latitude: dest["latitude"], longitude: dest["longitude"], radius: 5, fillKey: 'gt50' });

                rand = '#'+(Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0');                
                map.arc(arcs, { strokeWidth: 5, strokeColor: rand });
                map.bubbles(bubbles, {
                    popupTemplate: function (geo, data) {
                        return "<div class='hoverinfo'> user: " +data.user +" on port: "+ data.port +" from: " + data.ip + "</div>";
                    }
                });
                map.svg.selectAll('path.datamaps-arc').attr("opacity", 1);
                map.svg.selectAll('path.datamaps-arc').transition().duration(5000).style("opacity", 0);
                map.svg.selectAll('path.datamaps-arc').transition().delay(5000).remove();
                await sleep(5000);
                i++;
            }
        }

        demo();
    </script>
</body>

</html>